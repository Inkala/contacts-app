{"version":3,"sources":["containers/ContactDetails/ContactDetails.module.scss","components/SearchBar/SearchBar.module.scss","components/ContactsList/ContactsList.module.scss","components/ConnectionCard/ConnectionCard.module.scss","components/SideLetters/SideLetters.module.scss","containers/LeftNavigation/LeftNavigation.module.scss","App.module.scss","components/Pagination/Pagination.module.scss","helpers/contactsService.js","store/actions/actions.js","store/actions/actionTypes.js","components/ConnectionCard/ConnectionCard.js","components/SearchBar/SearchBar.js","containers/ContactDetails/ContactDetails.js","components/SideLetters/SideLetters.js","components/Pagination/Pagination.js","components/ContactsList/ContactsList.js","containers/LeftNavigation/LeftNavigation.js","App.js","serviceWorker.js","store/reducers/reducer.js","index.js"],"names":["module","exports","axiosInstance","axios","create","baseURL","setCurrentContact","contact","type","currentContact","ConnectionCard","connection","avatar","backgroundImage","className","classes","connectionCard","style","name","SearchBar","state","inputSearch","handleFilter","event","props","setState","target","value","onSearchContact","toLowerCase","onSearchConnection","this","contactSearchTerm","connectionSearchTerm","searchClasses","searchBar","push","contacts","connections","join","icon","faSearch","onChange","placeholder","Component","connect","dispatch","searchTerm","startLetter","actions","ContactDetails","displayedConnections","handleFilterByName","filteredContacts","filter","match","prevProps","onGetConnections","contactDetails","Fragment","description","map","key","id","onClick","onClickConection","contactConnections","error","connectionsArr","SideLetters","activeLetter","handleClick","letter","onLetterClicked","alphabet","split","sideLetters","l","activeClass","active","Pagination","contactsPerPage","totalContacts","paginationHandler","currentPage","pagesAmount","Math","ceil","listPagination","disabled","ContactsList","displayedContacts","handlePageChange","num","newPage","handlePagination","startContact","slice","console","log","length","handleFilterByLetter","trim","toUpperCase","handleNameClick","onClickContact","onGetContacts","prevState","contactsList","contactElement","loading","get","then","res","data","sort","c1","c2","localeCompare","getAllContactsSuccess","catch","err","LeftNavigation","leftNavigation","App","Boolean","window","location","hostname","initialState","reducer","action","includes","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f44e657.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactDetails\":\"ContactDetails_contactDetails__3746H\",\"avatar\":\"ContactDetails_avatar__38lNe\",\"description\":\"ContactDetails_description__dOt-8\",\"connections\":\"ContactDetails_connections__Hmlyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"SearchBar_searchBar__1hWdk\",\"contacts\":\"SearchBar_contacts__-ifxf\",\"connections\":\"SearchBar_connections__9FmwS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsList\":\"ContactsList_contactsList__1lKb1\",\"contactElement\":\"ContactsList_contactElement__11cmD\",\"active\":\"ContactsList_active__6V1bU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"connectionCard\":\"ConnectionCard_connectionCard__reFuf\",\"avatar\":\"ConnectionCard_avatar__1vCNq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sideLetters\":\"SideLetters_sideLetters__Ok2eB\",\"active\":\"SideLetters_active__HDv-B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftNavigation\":\"LeftNavigation_leftNavigation__2Wj-G\",\"contacts\":\"LeftNavigation_contacts__9GVQx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listPagination\":\"Pagination_listPagination__2Luol\"};","import axios from 'axios';\n\nconst axiosInstance = axios.create({\n  baseURL: 'https://exercise.goldenspear.com'\n});\n\nexport default axiosInstance;\n","import axios from '../../helpers/contactsService';\nimport * as actionTypes from './actionTypes';\n\nexport const getAllContactsSuccess = contacts => {\n  return {\n    type: actionTypes.GET_ALL_CONTACTS_SUCCESS,\n    contacts,\n    currentContact: contacts[0]\n  };\n};\n\nexport const getAllContactsFail = error => {\n  return {\n    type: actionTypes.GET_ALL_CONTACTS_FAIL,\n    error\n  };\n};\n\nexport const getAllContactsStart = () => {\n  return {\n    type: actionTypes.GET_ALL_CONTACTS_START\n  };\n};\n\nexport const getAllContacts = () => {\n  return dispatch => {\n    dispatch(getAllContactsStart());\n    return axios\n      .get('/contacts.json')\n      .then(res => {\n        const contacts = res.data.sort((c1, c2) =>\n          c1.name.localeCompare(c2.name)\n        );\n        dispatch(getAllContactsSuccess(contacts));\n      })\n      .catch(err => {\n        dispatch(getAllContactsFail(err));\n      });\n  };\n};\n\nexport const setContactSearchTerm = searchTerm => {\n  return {\n    type: actionTypes.SET_CONTACT_SEARCH_TERM,\n    contactSearchTerm: searchTerm,\n    connectionSearchTerm: '', // Reset connections search bar\n    startLetter: '' // Reset active letter\n  };\n};\n\nexport const setConnectionSearchTerm = searchTerm => {\n  return {\n    type: actionTypes.SET_CONNECTION_SEARCH_TERM,\n    connectionSearchTerm: searchTerm,\n    contactSearchTerm: '' // Reset contacts search bar\n  };\n};\n\nexport const setStartLetter = letter => {\n  return {\n    type: actionTypes.SET_START_LETTER,\n    startLetter: letter\n  };\n};\n\nexport const setCurrentContact = contact => {\n  return {\n    type: actionTypes.SET_CURRENT_CONTACT,\n    currentContact: contact\n  };\n};\n\nexport const getConnections = connectionsArr => {\n  return {\n    type: actionTypes.GET_CONNECTIONS,\n    connectionsArr: connectionsArr\n  };\n};\n","export const GET_ALL_CONTACTS_START = 'GET_ALL_CONTACTS_START';\nexport const GET_ALL_CONTACTS_SUCCESS = 'GET_ALL_CONTACTS';\nexport const GET_ALL_CONTACTS_FAIL = 'GET_ALL_CONTACTS_FAIL';\nexport const SET_CONTACT_SEARCH_TERM = 'SET_CONTACT_SEARCH_TERM';\nexport const SET_CONNECTION_SEARCH_TERM = 'SET_CONNECTION_SEARCH_TERM';\nexport const SET_START_LETTER = 'SET_START_LETTER';\nexport const SET_CURRENT_CONTACT = 'SET_CURRENT_CONTACT';\nexport const GET_CONNECTIONS = 'GET_CONNECTIONS';","import React from 'react';\nimport classes from './ConnectionCard.module.scss';\n\nconst ConnectionCard = ({ connection }) => {\n  const avatar = connection\n    ? { backgroundImage: `url(${connection.avatar})` }\n    : null;\n  return (\n    <article className={classes.connectionCard}>\n      <div className={classes.avatar} style={avatar}></div>\n      <p>{connection.name}</p>\n    </article>\n  );\n};\n\nexport default ConnectionCard;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport * as actions from '../../store/actions/actions';\nimport classes from './SearchBar.module.scss';\n\nclass SearchBar extends Component {\n  state = {\n    inputSearch: ''\n  };\n\n  handleFilter = event => {\n    const { type } = this.props;\n    this.setState({ inputSearch: event.target.value });\n    if (type === 'contacts') {\n      this.props.onSearchContact(event.target.value.toLowerCase());\n    } else {\n      this.props.onSearchConnection(event.target.value.toLowerCase());\n    }\n  };\n\n  render() {\n    const { type, contactSearchTerm, connectionSearchTerm } = this.props;\n\n    const searchClasses = [classes.searchBar];\n    if (type === 'contacts') {\n      searchClasses.push(classes.contacts);\n    }\n    if (type === 'connections') {\n      searchClasses.push(classes.connections);\n    }\n    return (\n      <section className={searchClasses.join(' ')}>\n        <FontAwesomeIcon icon={faSearch} />\n        <input\n          type=\"text\"\n          value={type === 'contacts' ? contactSearchTerm : connectionSearchTerm}\n          onChange={this.handleFilter}\n          placeholder=\"Search by name...\"\n        />\n      </section>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  onSearchChange: PropTypes.func\n};\nconst mapStateToProps = state => {\n  return {\n    contactSearchTerm: state.contactSearchTerm,\n    connectionSearchTerm: state.connectionSearchTerm\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchContact: searchTerm =>\n      dispatch(actions.setContactSearchTerm(searchTerm)),\n    onSearchConnection: searchTerm =>\n      dispatch(actions.setConnectionSearchTerm(searchTerm))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n// import PropTypes from 'prop-types';\n\nimport * as actions from '../../store/actions/actions';\nimport classes from './ContactDetails.module.scss';\nimport ConnectionCard from '../../components/ConnectionCard/ConnectionCard';\nimport SearchBar from '../../components/SearchBar/SearchBar';\n\nclass ContactDetails extends Component {\n  state = {\n    displayedConnections: null\n  };\n\n  componentDidUpdate(prevProps) {\n    const { contact, connections, searchTerm } = this.props;\n\n    if (contact !== prevProps.contact) {\n      this.props.onGetConnections(this.props.contact.connections);\n    }\n    if (connections !== prevProps.connections) {\n    this.setState({ displayedConnections: connections });\n    }\n\n    if (searchTerm !== prevProps.searchTerm) {\n      this.handleFilterByName(searchTerm);\n    }\n  }\n\n  handleFilterByName = searchTerm => {\n    const filteredContacts = this.props.connections.filter(({ name }) =>\n      name.toLowerCase().match(searchTerm)\n    );\n    this.setState({ displayedConnections: filteredContacts });\n  };\n\n  render() {\n    const { contact } = this.props;\n    const { displayedConnections } = this.state;\n    let avatar = { backgroundImage: 'url(img/user_avatar.png)' };\n    if (contact && contact.avatar) {\n      avatar = { backgroundImage: `url(${contact.avatar})` };\n    }\n    return (\n      <section className={classes.contactDetails}>\n        {contact ? (\n          <React.Fragment>\n            <header>\n              <div className={classes.avatar} style={avatar}></div>\n              <h1>{contact.name}</h1>\n              <SearchBar type=\"connections\" />\n            </header>\n            <main>\n              <div className={classes.description}>\n                <span>Description:</span>\n                <p>{contact.description}</p>\n              </div>\n              <section className={classes.connections}>\n                {displayedConnections\n                  ? displayedConnections.map(connection => (\n                      <button\n                        key={connection.id}\n                        onClick={() => this.props.onClickConection(connection)}\n                      >\n                        <ConnectionCard connection={connection} />\n                      </button>\n                    ))\n                  : null}\n              </section>\n            </main>\n          </React.Fragment>\n        ) : (\n          <p>Please select</p>\n        )}\n      </section>\n    );\n  }\n}\n\n// ContactsList.propTypes = {\n//   contacts: PropTypes.array,\n//   loading: PropTypes.bool,\n//   searchTerm: PropTypes.string,\n//   startLetter: PropTypes.string,\n//   onGetContacts: PropTypes.func,\n//   onClickContact: PropTypes.func\n// };\n\nconst mapStateToProps = state => {\n  return {\n    contact: state.currentContact,\n    connections: state.contactConnections,\n    searchTerm: state.connectionSearchTerm,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetConnections: connectionsArr =>\n      dispatch(actions.getConnections(connectionsArr)),\n    onClickConection: connection =>\n      dispatch(actions.setCurrentContact(connection))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactDetails);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport * as actions from '../../store/actions/actions';\nimport classes from './SideLetters.module.scss';\n\nclass SideLetters extends Component {\n  state = {\n    activeLetter: ''\n  };\n\n  handleClick = letter => {\n    this.props.onLetterClicked(letter);\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props.startLetter !== prevProps.startLetter) {\n      this.setState({ activeLetter: this.props.startLetter });\n    }\n  }\n\n  render() {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\n    return (\n      <section className={classes.sideLetters}>\n        <div>\n          {alphabet.map(l => {\n            const activeClass =\n              l === this.state.activeLetter ? classes.active : null;\n            return (\n              <button\n                key={l}\n                className={activeClass}\n                onClick={() => this.handleClick(l)}\n              >\n                {l}\n              </button>\n            );\n          })}\n        </div>\n      </section>\n    );\n  }\n}\n\nSideLetters.propTypes = {\n  onLetterClicked: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    startLetter: state.startLetter\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onLetterClicked: letter => dispatch(actions.setStartLetter(letter))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideLetters);\n","import React from 'react';\n// import PropTypes from 'prop-types';\n\nimport classes from './Pagination.module.scss';\n\nconst Pagination = ({\n  contactsPerPage,\n  totalContacts,\n  paginationHandler,\n  currentPage\n}) => {\n  const pagesAmount = Math.ceil(totalContacts / contactsPerPage);\n  return (\n    <section className={classes.listPagination}>\n      <button\n        disabled={currentPage === 1}\n        onClick={() => paginationHandler(-1)}\n      >\n        &lt;\n      </button>\n      <span>{`${currentPage}/${pagesAmount}`}</span>\n      <button\n        disabled={currentPage === pagesAmount}\n        onClick={() => paginationHandler(1)}\n      >\n        &gt;\n      </button>\n    </section>\n  );\n};\n\n// Pagination.propTypes = {\n//   cardsPerPage: PropTypes.number,\n//   totalContacts: PropTypes.number,\n//   currentPage: PropTypes.number,\n//   paginationHandler: PropTypes.func,\n// };\n\nexport default Pagination;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport * as actions from '../../store/actions/actions';\nimport classes from './ContactsList.module.scss';\nimport Pagination from '../Pagination/Pagination';\n\nclass ContactsList extends Component {\n  state = {\n    displayedContacts: [], // Contacts to show after filter and pagination\n    filteredContacts: null, // Contacts to use on pagination\n    contactsPerPage: 30, // Number of Contacts per page\n    totalContacts: 0, // Total amount of Contacts to calculate amount of pages\n    currentPage: 1\n  };\n\n  componentDidMount() {\n    this.props.onGetContacts();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { contacts, searchTerm, startLetter } = this.props;\n    const { currentPage, filteredContacts } = this.state;\n\n    if (contacts !== prevProps.contacts) {\n      this.setState({ filteredContacts: contacts });\n    }\n    if (filteredContacts !== prevState.filteredContacts) {\n      this.handlePagination(currentPage);\n    }\n    if (startLetter !== prevProps.startLetter) {\n      this.handleFilterByLetter(startLetter);\n    }\n    if (searchTerm !== prevProps.searchTerm) {\n      this.handleFilterByName(searchTerm);\n    }\n  }\n\n  handlePageChange = num => {\n    const newPage = this.state.currentPage + num;\n    this.setState({ currentPage: newPage });\n    this.handlePagination(newPage);\n  };\n\n  handlePagination = currentPage => {\n    const { contactsPerPage, filteredContacts } = this.state;\n    const startContact = (currentPage - 1) * contactsPerPage;\n    const displayedContacts = filteredContacts.slice(\n      startContact,\n      startContact + contactsPerPage\n    );\n    console.log('contactsPerPage', contactsPerPage);\n    console.log('startContact', startContact);\n    console.log('displayedContacts', displayedContacts);\n\n    this.setState({\n      displayedContacts,\n      totalContacts: filteredContacts.length\n    });\n  };\n\n  handleFilterByName = searchTerm => {\n    this.handleFilterByLetter('');\n    const filteredContacts = this.props.contacts.filter(({ name }) =>\n      name.toLowerCase().match(searchTerm)\n    );\n    this.setState({ filteredContacts, currentPage: 1 });\n  };\n\n  handleFilterByLetter = startLetter => {\n    const filteredContacts = this.props.contacts.filter(({ name }) => {\n      name = name.trim().toUpperCase();\n      return name[0] === startLetter;\n    });\n    this.setState({ filteredContacts, currentPage: 1 });\n  };\n\n  handleNameClick = contact => {\n    this.props.onClickContact(contact);\n  };\n\n  render() {\n    const {\n      displayedContacts,\n      filteredContacts,\n      contactsPerPage,\n      currentPage\n    } = this.state;\n\n    const { currentContact } = this.props;\n    let contactsList = <p>Name not found</p>;\n    if (displayedContacts && displayedContacts.length) {\n      contactsList = (\n        <ul>\n          {displayedContacts.map(contact => {\n            const activeClass =\n              currentContact.name === contact.name ? classes.active : null;\n            return (\n              <li className={classes.contactElement} key={contact.id}>\n                <button\n                  className={activeClass}\n                  onClick={() => this.handleNameClick(contact)}\n                >\n                  {contact.name}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      );\n    }\n    return (\n      <section className={classes.contactsList}>\n        {displayedContacts && filteredContacts ? (\n          contactsList\n        ) : (\n          <p>Loading...</p>\n        )}\n        <Pagination\n          contactsPerPage={contactsPerPage}\n          totalContacts={this.state.totalContacts}\n          paginationHandler={this.handlePageChange}\n          currentPage={currentPage}\n        />\n      </section>\n    );\n  }\n}\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n  loading: PropTypes.bool,\n  searchTerm: PropTypes.string,\n  startLetter: PropTypes.string,\n  onGetContacts: PropTypes.func,\n  onClickContact: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n  return {\n    contacts: state.contacts,\n    currentContact: state.currentContact,\n    loading: state.loading,\n    searchTerm: state.contactSearchTerm,\n    startLetter: state.startLetter,\n    error: state.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetContacts: () => dispatch(actions.getAllContacts()),\n    onClickContact: contact => dispatch(actions.setCurrentContact(contact))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\n\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport SideLetters from '../../components/SideLetters/SideLetters';\nimport ContactsList from '../../components/ContactsList/ContactsList';\nimport classes from './LeftNavigation.module.scss';\n\nconst LeftNavigation = () => {\n  return (\n    <section className={classes.leftNavigation}>\n      <SearchBar type=\"contacts\" />\n      <section className={classes.contacts}>\n        <SideLetters />\n        <ContactsList />\n      </section>\n    </section>\n  );\n};\n\nexport default LeftNavigation;\n","import React from 'react';\n\nimport ContactDetails from './containers/ContactDetails/ContactDetails';\nimport classes from './App.module.scss';\nimport LeftNavigation from './containers/LeftNavigation/LeftNavigation';\n\n/*\nTODO:\n  Loading\n  Create error message\n  Clean comments\n  Clean console logs\n  PropTypes\n  Code splitting\n*/\n\nfunction App() {\n  return (\n    <main className={classes.App}>\n      <LeftNavigation />\n      <ContactDetails />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n  contacts: [],\n  contactSearchTerm: '',\n  connectionSearchTerm: '',\n  startLetter: null,\n  currentContact: null\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_ALL_CONTACTS_START:\n      return {\n        ...state,\n        loading: true\n      };\n    case actionTypes.GET_ALL_CONTACTS_SUCCESS:\n      return {\n        ...state,\n        contacts: action.contacts,\n        currentContact: action.currentContact,\n        loading: false\n      };\n    case actionTypes.GET_ALL_CONTACTS_FAIL:\n      return {\n        ...state,\n        loading: false,\n        error: action.error\n      };\n    case actionTypes.SET_CONTACT_SEARCH_TERM:\n      return {\n        ...state,\n        contactSearchTerm: action.contactSearchTerm,\n        connectionSearchTerm: action.connectionSearchTerm,\n        startLetter: action.startLetter\n      };\n    case actionTypes.SET_CONNECTION_SEARCH_TERM:\n      return {\n        ...state,\n        contactSearchTerm: action.contactSearchTerm,\n        connectionSearchTerm: action.connectionSearchTerm\n      };\n    case actionTypes.SET_START_LETTER:\n      return {\n        ...state,\n        startLetter: action.startLetter\n      };\n    case actionTypes.SET_CURRENT_CONTACT:\n      return {\n        ...state,\n        currentContact: action.currentContact\n      };\n    case actionTypes.GET_CONNECTIONS:\n      const connections = state.contacts.filter(contact =>\n        action.connectionsArr.includes(contact.id)\n      );\n      return {\n        ...state,\n        contactConnections: connections\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { BrowserRouter as Router } from 'react-router-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './store/reducers/reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* <Router> */}\n      <App />\n    {/* </Router> */}\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}